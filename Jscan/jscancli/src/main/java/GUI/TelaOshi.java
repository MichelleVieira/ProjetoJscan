/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DAL.OshiReadDAO;
import Model.Computador;
import Model.LeituraPc;
import OSHI.PcInfo;
import OSHI.PcLeitura;
import java.sql.SQLException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/**
 *
 * @author aluno
 */
public class TelaOshi extends javax.swing.JFrame {

    private Timer timer;
    private boolean inMonitoring;

    /**
     * Creates new form TelaOshi
     *
     * @throws java.sql.SQLException
     */
    public TelaOshi() throws SQLException {
        initComponents();

        ImageIcon imgPC = new ImageIcon(".\\src\\main\\java\\GUI\\public\\data.png");
        lblPC.setIcon((Icon) imgPC);

        ImageIcon imgLogo = new ImageIcon(".\\src\\main\\java\\GUI\\public\\Logojscan.png");
        lblLogo.setIcon((Icon) imgLogo);
        
        jLabel1.setText((Computador.getNmComputador()));

        inMonitoring = false;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        processAtivo = new javax.swing.JLabel();
        resultProcessAtivo = new javax.swing.JLabel();
        processamento = new javax.swing.JLabel();
        resultProcess = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        RAM = new javax.swing.JLabel();
        resultRam = new javax.swing.JLabel();
        tempAtividadePC = new javax.swing.JLabel();
        ramTotal = new javax.swing.JLabel();
        resultTempPC = new javax.swing.JLabel();
        Armazenamento = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        resultArmazenamento = new javax.swing.JLabel();
        memoryTotal = new javax.swing.JLabel();
        lblPC = new javax.swing.JLabel();
        lblLogo = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        textoMarker = new javax.swing.JLabel();
        discoAtivo = new javax.swing.JLabel();
        resultDiscoAtivo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(27, 54, 144));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setText("Nome do Pc");

        processAtivo.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        processAtivo.setText("Número de processos ativos: ");

        resultProcessAtivo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        resultProcessAtivo.setText("...");

        processamento.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        processamento.setText("Processamento: ");

        resultProcess.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        resultProcess.setText("...");

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel8.setText("%");

        RAM.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        RAM.setText("Memória RAM disponível: ");

        resultRam.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        resultRam.setText("...");

        tempAtividadePC.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        tempAtividadePC.setText("Tempo de atividade do PC:");

        ramTotal.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        ramTotal.setText("");

        resultTempPC.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        resultTempPC.setText("...");

        Armazenamento.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        Armazenamento.setText("Armazenamento disponível:");

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel13.setText("seg.");

        resultArmazenamento.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        resultArmazenamento.setText("...");

        memoryTotal.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        memoryTotal.setText("");

        lblPC.setText("   ");

        lblLogo.setText("       ");

        jButton1.setBackground(new java.awt.Color(217, 81, 51));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Start");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        textoMarker.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoMarker.setText("Clique no botão para inicar o monitoramento!");

        discoAtivo.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        discoAtivo.setText("Média de leitura de disco:");

        resultDiscoAtivo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        resultDiscoAtivo.setText("...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(lblPC)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Armazenamento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resultArmazenamento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(memoryTotal))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(processamento)
                                .addGap(2, 2, 2)
                                .addComponent(resultProcess)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(RAM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resultRam)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ramTotal)))))
                .addContainerGap(123, Short.MAX_VALUE))
            .addComponent(textoMarker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tempAtividadePC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultTempPC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(processAtivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resultProcessAtivo))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblLogo))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(discoAtivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resultDiscoAtivo))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPC))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1)))
                .addGap(25, 25, 25)
                .addComponent(textoMarker)
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processamento)
                    .addComponent(resultProcess)
                    .addComponent(jLabel8))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RAM)
                    .addComponent(resultRam)
                    .addComponent(ramTotal))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Armazenamento)
                    .addComponent(resultArmazenamento)
                    .addComponent(memoryTotal))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processAtivo)
                    .addComponent(resultProcessAtivo))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempAtividadePC)
                    .addComponent(resultTempPC)
                    .addComponent(jLabel13))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discoAtivo)
                    .addComponent(resultDiscoAtivo))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLogo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (!inMonitoring) {
            textoMarker.setText("Monitoramento iniciado!");
            jButton1.setText("Stop");
            inMonitoring = true;
            timer = new Timer();

            PcInfo oshiInfo = new PcInfo();
            PcLeitura oshiLeitura = new PcLeitura();
            OshiReadDAO leitura;

            try {
                leitura = new OshiReadDAO();
                timer.scheduleAtFixedRate(new TimerTask() {
                    @Override
                    public void run() {
                        LeituraPc.setActualMemoryPercentage(oshiLeitura.getRamDisponivel());
                        LeituraPc.setActualStoragePercentage(oshiLeitura.getMemoriaDisponível());
                        LeituraPc.setProcessing(oshiLeitura.getProcessamento() * 100);
                        LeituraPc.setProcessNumber(oshiLeitura.getNumeroDeProcessosAtivos());
                        LeituraPc.setUpTime(oshiLeitura.getUpTime());
                        LeituraPc.setAvarageRead(oshiLeitura.getLeituraDeDisco());

                        try {
                            leitura.Insert();
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaOshi.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //RAM -------------------------------------------------------------------------

                        if((LeituraPc.getActualMemoryPercentage() / 1024 / 2014) > 999)
                            resultRam.setText(String.format("%dMB", (LeituraPc.getActualMemoryPercentage() / 1024 / 1024) ));
                        else{
                            resultRam.setText(String.format("%.2fMB", ((float)LeituraPc.getActualMemoryPercentage() / 1024F / 1024F) ));
                        }

                        ramTotal.setText(String.format("/ %dMB", (oshiInfo.getRamNumber() / 1024 / 1024)));

                        //ARMAZENAMENTO -------------------------------------------------------------------

                        if((LeituraPc.getActualStoragePercentage() / 1024 / 1_048_576) > 99)
                            resultArmazenamento.setText(String.format("%dGB",  (LeituraPc.getActualStoragePercentage() / 1024 / 1024 / 1024 ) ));
                        else {
                            resultArmazenamento.setText(String.format("%.2fGB",  ((float)LeituraPc.getActualStoragePercentage() / 1024F / 1024F / 1024F ) ));
                        }

                        memoryTotal.setText(String.format("/ %dGB", oshiInfo.getArmazenamentoNumber() / 1014 / 1_048_576));

                        //PROCESSAMENTO ------------------------------------------------------------------

                        resultProcess.setText(String.format("%.2f", LeituraPc.getProcessing()));

                        //TEMPO ATIVO ---------------------------------------------------------------------
                        
                        resultTempPC.setText(String.valueOf(oshiLeitura.getUpTime()));

                        //NUMERO DE PROCESSOS ATIVOS ------------------------------------------------------

                        resultProcessAtivo.setText(String.valueOf(oshiLeitura.getNumeroDeProcessosAtivos()));

                        //MÉDIA DE LEITURA DE DISCO --------------------------------------------------------

                        resultDiscoAtivo.setText(String.format("%d por minuto", oshiLeitura.getLeituraDeDisco()));


                    }
                }, 200, 3000);
            } catch (SQLException ex) {
                Logger.getLogger(TelaOshi.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            textoMarker.setText("Mostrando dados do último monitoramento");
            inMonitoring = false;
            jButton1.setText("Start");
            timer.cancel();
            timer.purge();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaOshi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaOshi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaOshi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaOshi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new TelaOshi().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(TelaOshi.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Armazenamento;
    private javax.swing.JLabel RAM;
    private javax.swing.JLabel discoAtivo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel memoryTotal;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel ramTotal;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblPC;
    private javax.swing.JLabel processAtivo;
    private javax.swing.JLabel processamento;
    private javax.swing.JLabel resultArmazenamento;
    private javax.swing.JLabel resultDiscoAtivo;
    private javax.swing.JLabel resultProcess;
    private javax.swing.JLabel resultProcessAtivo;
    private javax.swing.JLabel resultRam;
    private javax.swing.JLabel resultTempPC;
    private javax.swing.JLabel tempAtividadePC;
    private javax.swing.JLabel textoMarker;
    // End of variables declaration//GEN-END:variables
}
